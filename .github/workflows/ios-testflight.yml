name: iOS Build & TestFlight Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  XCODE_VERSION: '15.2'
  IOS_SCHEME: 'lcc'
  IOS_PROJECT: 'lcc.xcodeproj'

jobs:
  test:
    name: Run Tests
    runs-on: macos-14
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
      
      - name: Cache Swift Package Manager
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-
      
      - name: Run tests
        run: |
          xcodebuild test \
            -scheme ${{ env.IOS_SCHEME }} \
            -project ${{ env.IOS_PROJECT }} \
            -destination 'platform=iOS Simulator,name=iPhone 15 Pro,OS=latest' \
            -enableCodeCoverage YES \
            | xcpretty
        continue-on-error: false

  build:
    name: Build & Archive
    runs-on: macos-14
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full git history for versioning
      
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
      
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
      
      - name: Install Fastlane
        run: |
          gem install fastlane
      
      - name: Setup environment variables
        run: |
          echo "LCC_API_BASE_URL=${{ secrets.LCC_API_BASE_URL || 'https://lcc.live' }}" >> $GITHUB_ENV
          echo "GRAFANA_METRICS_URL=${{ secrets.GRAFANA_METRICS_URL || 'https://lcc.live/api/metrics' }}" >> $GITHUB_ENV
      
      - name: Increment build number
        run: |
          BUILD_NUMBER=${{ github.run_number }}
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $BUILD_NUMBER" "${{ env.IOS_PROJECT }}/project.pbxproj" || true
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV
      
      - name: Import Code-Signing Certificates
        uses: Apple-Actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.CERTIFICATES_P12 }}
          p12-password: ${{ secrets.CERTIFICATES_P12_PASSWORD }}
      
      - name: Download Provisioning Profiles
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "${{ secrets.PROVISIONING_PROFILE }}" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision
      
      - name: Build & Archive
        run: |
          fastlane ios build
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          FASTLANE_USER: ${{ secrets.APPLE_ID }}
          FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.APP_SPECIFIC_PASSWORD }}
      
      - name: Upload to TestFlight
        run: |
          fastlane ios beta
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          FASTLANE_USER: ${{ secrets.APPLE_ID }}
          FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.APP_SPECIFIC_PASSWORD }}
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ios-build-artifacts
          path: |
            *.ipa
            *.dSYM.zip
            fastlane/report.xml
          retention-days: 30
      
      - name: Notify on success
        if: success()
        run: |
          echo "✅ Build ${{ env.BUILD_NUMBER }} uploaded to TestFlight successfully!"
      
      - name: Notify on failure
        if: failure()
        run: |
          echo "❌ Build failed. Check the logs for details."

  lint:
    name: Swift Lint
    runs-on: macos-14
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install SwiftLint
        run: |
          brew install swiftlint
      
      - name: Run SwiftLint
        run: |
          swiftlint lint --reporter github-actions-logging
        continue-on-error: true

