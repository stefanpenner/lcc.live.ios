name: iOS CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    name: Build and Test iOS App
    runs-on: macos-14
    timeout-minutes: 30
    strategy:
      matrix:
        simulator: ["iPhone 16", "iPhone 15"]
        ios-version: ["18.0", "17.5"]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Xcode Version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'
      - name: Verify Xcode Version
        run: |
          xcode_version=$(xcodebuild -version | grep Xcode | awk '{print $2}')
          echo "Selected Xcode version: $xcode_version"
          if ! [[ "$xcode_version" =~ ^16\..* ]]; then
            echo "Error: Expected Xcode 16.x, but got $xcode_version" >&2
            exit 1
          fi

      - name: Cache Pods
        uses: actions/cache@v4
        with:
          path: Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Install Dependencies
        run: |
          if [ -f "Podfile" ]; then
            pod install --repo-update
          fi

      - name: Import Code Signing Certificates
        if: ${{ env.ENABLE_CODE_SIGNING == 'true' }}
        env:
          CERTIFICATE: ${{ secrets.CERTIFICATE }}
          CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
        run: |
          echo "$CERTIFICATE" | base64 --decode > certificate.p12
          security import certificate.p12 -P "$CERTIFICATE_PASSWORD"
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "${{ secrets.PROVISIONING_PROFILE }}" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision

      - name: Determine Project Type
        id: project
        run: |
          if ls *.xcworkspace >/dev/null 2>&1; then
            echo "filetype=workspace" >> $GITHUB_OUTPUT
            echo "file=$(ls *.xcworkspace)" >> $GITHUB_OUTPUT
          elif ls *.xcodeproj >/dev/null 2>&1; then
            echo "filetype=project" >> $GITHUB_OUTPUT
            echo "file=$(ls *.xcodeproj)" >> $GITHUB_OUTPUT
          else
            echo "No Xcode project or workspace found" >&2
            exit 1
          fi

      - name: Get Default Scheme
        id: scheme
        run: |
          scheme=$(xcodebuild -list -json | jq -r '.project.targets[0]' || true)
          if [ -z "$scheme" ]; then
            echo "Could not determine scheme" >&2
            exit 1
          fi
          echo "name=$scheme" >> $GITHUB_OUTPUT
          echo "Using scheme: $scheme"

      - name: Select Simulator
        id: simulator
        run: |
          device="${{ matrix.simulator }}"
          echo "name=$device" >> $GITHUB_OUTPUT
          echo "Selected simulator: $device"

      - name: Validate Simulator
        run: |
          device="${{ matrix.simulator }}"
          if ! xcrun simctl list devices | grep -q "${device}.*${{ matrix.ios-version }}"; then
            echo "Simulator ${device} with iOS ${{ matrix.ios-version }} not found" >&2
            exit 1
          fi

      - name: Build
        env:
          SCHEME: ${{ steps.scheme.outputs.name }}
          FILETYPE: ${{ steps.project.outputs.filetype }}
          FILE: ${{ steps.project.outputs.file }}
          DEVICE: ${{ steps.simulator.outputs.name }}
          IOS_VERSION: ${{ matrix.ios-version }}
        run: |
          xcodebuild build-for-testing \
            -${{ env.FILETYPE }} "${{ env.FILE }}" \
            -scheme "${{ env.SCHEME }}" \
            -destination "platform=iOS Simulator,name=${{ env.DEVICE }},OS=${{ env.IOS_VERSION }}" \
            -enableCodeCoverage YES \
            ${{ env.ENABLE_CODE_SIGNING == 'true' && '' || 'CODE_SIGNING_ALLOWED=NO' }}

      - name: Run Tests
        env:
          SCHEME: ${{ steps.scheme.outputs.name }}
          FILETYPE: ${{ steps.project.outputs.filetype }}
          FILE: ${{ steps.project.outputs.file }}
          DEVICE: ${{ steps.simulator.outputs.name }}
          IOS_VERSION: ${{ matrix.ios-version }}
        run: |
          xcodebuild test-without-building \
            -${{ env.FILETYPE }} "${{ env.FILE }}" \
            -scheme "${{ env.SCHEME }}" \
            -destination "platform=iOS Simulator,name=${{ env.DEVICE }},OS=${{ env.IOS_VERSION }}" \
            -enableCodeCoverage YES \
            ${{ env.ENABLE_CODE_SIGNING == 'true' && '' || 'CODE_SIGNING_ALLOWED=NO' }}

      - name: Upload Coverage
        if: success()
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.simulator }}-${{ matrix.ios-version }}
          path: |
            **/*.xcresult
            ~/Library/Developer/Xcode/DerivedData/**/Logs/Build/*.xcactivitylog
            ~/Library/Developer/Xcode/DerivedData/**/Logs/Test/*.xcactivitylog
