name: iOS CI

on: [push, pull_request]

jobs:
  ios-tests:
    name: Build and Test (iOS Simulator)
    runs-on: macos-14
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 'latest-stable'

      - name: Build and Test (auto-detect project/workspace)
        shell: bash
        run: |
          set -euo pipefail
          echo "Xcode version:"
          xcodebuild -version

          # Select a real, available iPhone simulator by UDID (avoid name/OS mismatch)
          UDID=$(xcrun simctl list devices available -j | python3 -c "import sys,json; d=json.load(sys.stdin); print(next((dev['udid'] for runtime,devs in (d.get('devices') or {}).items() if runtime.startswith('com.apple.CoreSimulator.SimRuntime.iOS') for dev in devs if dev.get('isAvailable') and 'iPhone' in dev.get('name','')), ''), end='')" || true)
          if [ -z "$UDID" ]; then
            echo "No available iOS iPhone simulator found; skipping tests."
            echo "Hint: Set IOS_SCHEME and ensure simulator runtimes are installed."
            exit 0
          fi
          DESTINATION="platform=iOS Simulator,id=$UDID"

          echo "Booting simulator $UDID (if not already booted)"
          xcrun simctl boot "$UDID" || true
          echo "Waiting for simulator to be fully booted"
          xcrun simctl bootstatus "$UDID" -b -s || true

          DERIVED_DATA="$RUNNER_TEMP/DerivedData"
          rm -rf "$DERIVED_DATA"
          mkdir -p "$DERIVED_DATA"

          # Detect workspace or project using BSD find (no -quit on macOS)
          WORKSPACE=$(find . -type d -name "*.xcworkspace" | head -n 1 | sed 's|^./||')
          PROJECT=$(find . -type d -name "*.xcodeproj" | head -n 1 | sed 's|^./||')

          if [ -n "$WORKSPACE" ]; then
            if [ -z "${IOS_SCHEME:-}" ]; then
              SCHEME=$(xcodebuild -list -json -workspace "$WORKSPACE" | python3 -c "import sys,json; d=json.load(sys.stdin); w=d.get('workspace') or d.get('project') or {}; schemes=w.get('schemes') or []; print(schemes[0] if schemes else '', end='')")
            else
              SCHEME="$IOS_SCHEME"
            fi
            if [ -z "$SCHEME" ]; then
              echo "No scheme found in workspace $WORKSPACE" >&2
              exit 1
            fi
            echo "Resolving package dependencies for workspace"
            xcodebuild -resolvePackageDependencies -workspace "$WORKSPACE" -scheme "$SCHEME" || true
            echo "Using workspace: $WORKSPACE"
            echo "Using scheme: $SCHEME"
            xcodebuild clean build-for-testing \
              -workspace "$WORKSPACE" \
              -scheme "$SCHEME" \
              -destination "$DESTINATION" \
              -derivedDataPath "$DERIVED_DATA" \
              CODE_SIGNING_ALLOWED=NO | xcpretty || true
            xcodebuild test-without-building \
              -workspace "$WORKSPACE" \
              -scheme "$SCHEME" \
              -destination "$DESTINATION" \
              -derivedDataPath "$DERIVED_DATA" \
              -retry-tests-on-failure -test-iterations 2 \
              CODE_SIGNING_ALLOWED=NO
          elif [ -n "$PROJECT" ]; then
            if [ -z "${IOS_SCHEME:-}" ]; then
              SCHEME=$(xcodebuild -list -json -project "$PROJECT" | python3 -c "import sys,json; d=json.load(sys.stdin); p=d.get('project') or {}; schemes=p.get('schemes') or []; print(schemes[0] if schemes else '', end='')")
            else
              SCHEME="$IOS_SCHEME"
            fi
            if [ -z "$SCHEME" ]; then
              echo "No scheme found in project $PROJECT" >&2
              exit 1
            fi
            echo "Using project: $PROJECT"
            echo "Using scheme: $SCHEME"
            echo "Resolving package dependencies for project"
            xcodebuild -resolvePackageDependencies -project "$PROJECT" -scheme "$SCHEME" || true
            xcodebuild clean build-for-testing \
              -project "$PROJECT" \
              -scheme "$SCHEME" \
              -destination "$DESTINATION" \
              -derivedDataPath "$DERIVED_DATA" \
              CODE_SIGNING_ALLOWED=NO | xcpretty || true
            xcodebuild test-without-building \
              -project "$PROJECT" \
              -scheme "$SCHEME" \
              -destination "$DESTINATION" \
              -derivedDataPath "$DERIVED_DATA" \
              -retry-tests-on-failure -test-iterations 2 \
              CODE_SIGNING_ALLOWED=NO
          else
            echo "No .xcworkspace or .xcodeproj found; nothing to test."
            exit 0
          fi

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-test-results
          path: |
            **/*.xcresult
            ~/Library/Developer/Xcode/DerivedData/**/Logs/Test/*.xcactivitylog
          if-no-files-found: ignore
